{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Form/Form.js","actions/state.js","components/Form/index.js","components/PlayerList/PlayerList.js","components/PlayerList/index.js","components/TeamGenerator/TeamGenerator.js","components/TeamGenerator/index.js","components/ResetBtn/ResetBtn.js","components/ResetBtn/index.js","components/App/App.js","data/initial.js","data/reducer.js","index.js"],"names":["Header","className","Footer","Form","props","state","player","position","playerList","fullPlayer","nameError","positionError","positionEmpty","handleChangeName","bind","handleSubmit","handleChangePosition","e","this","setState","currentTarget","value","preventDefault","positions","map","playerobj","defenders","filter","goalkeepers","strikers","midfielders","handleSave","length","onSubmit","InputGroup","FormControl","placeholder","onChange","ButtonToolbar","ToggleButtonGroup","type","name","ToggleButton","Button","variant","size","disabled","onClick","Component","addPlayer","form","connect","dispatch","PlayerList","teamGenerated","handlePlayerDelete","i","deletePlayer","payload","index","ListGroup","current","key","Item","handleReset","TeamGenerator","teamA","teamB","teamAsize","teamBsize","handleTeamSubmit","handleChangeTeamASize","generateTeams","defaultValue","block","shuffledplayerList","array","j","Math","floor","random","shuffleArray","item","push","ResetBtn","App","initial","reducer","action","playerObj","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7632aeb5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header () {\n    return (\n        <>\n        <header className=\"page-header p-5 header\">\n            <h1>kick off!</h1>\n                <p>Create your football team. 10 players required. </p>\n        </header>\n        </>\n      );\n}\n\nexport default Header; ","import React from \"react\";\n\nconst Footer = () => (\n     <footer className=\"page-footer\">\n          <p> App created by Jae Lee 2019.</p>\n     </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport { InputGroup, FormControl, Button, ButtonToolbar, ToggleButtonGroup, ToggleButton }  from 'react-bootstrap';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n            player: props.player,\n            position: props.position,\n            playerList: props.playerList,\n            fullPlayer: props.fullPlayer,\n            nameError: false,\n            positionError: false,\n            positionEmpty: false,\n        }\n\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this); \n        this.handleChangePosition = this.handleChangePosition.bind(this); \n    }\n\n    handleChangeName(e) {\n        this.setState({\n            player: e.currentTarget.value,\n        })\n    }\n\n    handleChangePosition(e){\n        this.setState({ \n            position:e.currentTarget.value,\n            positionError: false\n        });\n   };\n    \n    handleSubmit(e) {\n        e.preventDefault();\n\n        let { playerList } = this.props;\n        let { player, position } = this.state;\n\n        let positions = playerList.map(playerobj => playerobj.position)\n        let defenders = positions.filter(position => position === \"defender\")\n        let goalkeepers = positions.filter(position => position === \"goalkeeper\")\n        let strikers = positions.filter(position => position === \"striker\")\n        let midfielders = positions.filter(position => position === \"midfielder\")\n\n        this.props.handleSave(this.state); \n\n        if(player === \"\") {\n            this.setState({\n                nameError: true,\n                positionError: this.state.positionError,\n            })\n        }\n        if(position === \"\"){\n            this.setState({\n                positionEmpty: true,\n                player: this.state.player\n            })\n        }\n        if(position === \"defender\" && defenders.length == 2){\n            this.setState({\n                positionError: true,\n            })\n        }else if(position === \"goalkeeper\" && goalkeepers.length >= 2){\n            this.setState({\n                positionError: true,\n            })\n        }else if(position === \"striker\" && strikers.length >= 2){\n            this.setState({\n                positionError: true,\n            })\n        }else if(position === \"midfielder\" && midfielders.length >= 2){\n            this.setState({\n                positionError: true,\n            })\n        }else if(player !== \"\"){\n            this.setState({\n                nameError: false,\n                positionError: this.state.positionError,\n                player: \"\",\n            })\n        }else{\n            this.setState({\n                positionError: this.state.positionError,\n            })\n        }\n        if(playerList.length === 9) {\n            this.setState({\n                fullPlayer: true\n            })\n        }   \n    }\n    \n    render() { \n\n        let { player, position, nameError, positionError, positionEmpty } = this.state;\n\n        return (\n            <form onSubmit={ ()=>this.handleSubmit }\n                  className=\"form\">\n                <InputGroup className=\"mb-3\">\n                    <FormControl placeholder=\"enter player's name\"\n                                 value={ player }\n                                 onChange={ this.handleChangeName }  \n                    />\n\n                    { !nameError? null : \n                        <p className= \"errorMessage\"> Please enter player's name</p> \n                    }\n\n                <ButtonToolbar className=\"positionToolBar\">\n                    <ToggleButtonGroup className=\"buttonContainer\" type=\"radio\" name=\"options\">\n                        <label className=\"positionLabel\">I'm a ...</label>\n                        <ToggleButton   className=\"button positionBtn\" \n                                        value={\"anything\"} \n                                        onChange={ this.handleChangePosition }>Anything</ToggleButton>\n                        <ToggleButton   className=\"button positionBtn\" \n                                        value={\"defender\"} \n                                        onChange={ this.handleChangePosition }>Defender</ToggleButton>\n                        <ToggleButton   className=\"button positionBtn\" \n                                        value={\"goalkeeper\"} \n                                        onChange={ this.handleChangePosition }>Goalkeeper</ToggleButton>\n                        <ToggleButton   className=\"button positionBtn\" \n                                        value={\"striker\"} \n                                        onChange={ this.handleChangePosition }>Striker</ToggleButton>\n                        <ToggleButton   className=\"button positionBtn\" \n                                        value={\"midfielder\"} \n                                        onChange={ this.handleChangePosition }>Midfielder</ToggleButton>\n                    </ToggleButtonGroup>\n                </ButtonToolbar>\n\n                    { !positionError ? null : \n                        <p className= \"errorMessage\"> Enough { position }s now, select other positions\n                        </p> \n                    }\n\n                    { !positionEmpty ? null : \n                        <p className= \"errorMessage\"> Please select your position</p> \n                    }   \n\n                    { this.props.playerList.length !== 10 ? null : \n                        <p className= \"errorMessage\">  Now generate your team!\n                        </p> \n                    }\n                    \n                </InputGroup>\n\n                <Button className = \"button\"\n                        variant=\"primary\" size=\"lg\"\n                        disabled = { this.props.playerList.length === 10 ? true : false }\n                        onClick={ this.handleSubmit }\n                >Add a player</Button>\n\n            </form>\n        );\n    }\n}\n \nexport default Form;","export const addPlayer = (form) => {\n    return {\n        type: \"addPlayer\",\n        form\n    };\n};\n\nexport const reset = () => {\n    return {\n      type: \"reset\",\n    }; \n};\n\nexport const generateTeams = (playerList) => {\n\n    function shuffleArray (array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    const arrPlayerList = playerList.playerList;\n    const shuffledplayerList = shuffleArray(arrPlayerList)\n    const teamA = []; \n    const teamB = []; \n\n    shuffledplayerList.map((item , index) => {\n        if(teamA.length < playerList.teamAsize){\n            teamA.push(shuffledplayerList[index]);\n        }else{\n            teamB.push(shuffledplayerList[index]);\n        }\n    })\n\n    return {\n        type: \"generateTeams\",\n        payload : { teamA, teamB }\n    };\n};\n\nexport const deletePlayer = (playerList) => {\n\n    const newPlayerList = playerList.payload.filter((player,index) => index !== playerList.index)\n    \n    return {\n        type: \"deletePlayer\",\n        playerList : newPlayerList \n    }\n}; \n\n\n  ","import { connect } from 'react-redux';\nimport Form from './Form';\nimport { addPlayer } from '../../actions/state';\n\nconst mapStateToProps = state => {\n    return {\n        player: state.player,\n        position: state.position,\n        playerList: state.playerList,\n        fullPlayer: state.fullPlayer,\n    };\n};\n\nconst mapDispatchtoProps = dispatch => {\n    return{\n        handleSave: (value) => dispatch(addPlayer(value))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(Form);","import React, { Component } from 'react';\nimport { Button, ListGroup }  from 'react-bootstrap';\n\nclass PlayerList extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n            fullPlayer: props.fullPlayer,\n            position: props.position,\n            playerList: props.playerList,\n            teamGenerated: props.teamGenerated,\n        }\n\n        this.handlePlayerDelete = this.handlePlayerDelete.bind(this); \n    }\n\n    handlePlayerDelete(i) {\n        this.props.deletePlayer({\n            payload : this.props.playerList,\n            index : i\n        });\n    }\n\n    render() { \n\n        let { playerList, teamGenerated } = this.props;\n   \n        return (\n            <>\n            { playerList.length === 0 || teamGenerated ? null :\n            <>\n                <h2 className=\"listHeader\">Today's players</h2>\n                <ListGroup variant=\"flush\">\n                    { playerList.map((current, i) => {\n                            return (\n                                <div className=\"listContainer\" key={i}> \n                                    <ListGroup.Item className=\"listItems\">\n                                        <span className=\"playerList-player\">{ current.player }</span>\n                                        <span className=\"playerList-position\">{ current.position }</span>\n                                    </ListGroup.Item>\n\n                                    <Button className=\"delBtn\"\n                                            onClick={()=>{this.handlePlayerDelete(i)}}>Del</Button>\n                                </div>\n                            )\n                        }) \n                    }\n                </ListGroup>\n            </>\n            }  \n            </> \n        );\n    }\n}\n \nexport default PlayerList;\n\n","import { connect } from 'react-redux';\nimport PlayerList from './PlayerList';\nimport { addPlayer, deletePlayer, reset } from '../../actions/state';\n\n\nconst mapStateToProps = state => {\n    return {\n        playerList: state.playerList,\n        position: state.position,\n        fullPlayer: state.fullPlayer,\n    };\n};\n\nconst mapDispatchtoProps = dispatch => {\n    return{\n        addPlayer: PlayerList => dispatch(addPlayer(PlayerList)),\n        deletePlayer: PlayerList => dispatch(deletePlayer(PlayerList)),\n        handleReset: () => dispatch(reset()),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(PlayerList);","import React, { Component } from 'react';\nimport { Button, ListGroup, ButtonToolbar, ToggleButtonGroup, ToggleButton  }  from 'react-bootstrap';\n\nclass TeamGenerator extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            fullPlayer: props.fullPlayer,\n            playerList: props.playerList,\n            teamA: props.teamA,\n            teamB: props.teamB,\n            teamGenerated: props.teamGenerated,\n            teamAsize: props.teamAsize,\n            teamBsize: props.teamBsize,\n        }\n\n        this.handleTeamSubmit = this.handleTeamSubmit.bind(this); \n        this.handleChangeTeamASize = this.handleChangeTeamASize.bind(this); \n    }\n    \n    handleChangeTeamASize(e) {\n        this.setState({\n            teamAsize: e.currentTarget.value,\n        })\n    }\n\n    handleTeamSubmit(e) {\n        e.preventDefault();\n\n        let { playerList } = this.props;\n\n        this.props.generateTeams({...this.state, playerList})\n\n        this.setState({\n            teamGenerated: true,\n        })\n        \n        if(playerList.length === 10){\n            this.setState({\n                teamGenerated: true,\n                fullPlayer: true,\n            })\n        }\n    } \n    \n    render() { \n        \n        let { teamA, teamB, playerList } = this.props; \n        let { fullPlayer, teamGenerated, teamAsize } = this.state;\n        let teamBsize = playerList.length - teamAsize;\n\n        return (\n            <form className=\"form\">\n                <ButtonToolbar className=\"teamSizeToolBar\">\n                    <label className=\"teamLabel\">How many players in each team ? <br/> Team A :</label>\n                        <ToggleButtonGroup className=\"teamSizeBtnContainer\" type=\"radio\"     name=\"options\"  defaultValue={5} >\n                            <ToggleButton className=\"button teamSizeBtn\" \n                                          value={0} \n                                          onChange={ this.handleChangeTeamASize }>0</ToggleButton>\n                            <ToggleButton className=\"button teamSizeBtn\" \n                                          value={1} \n                                          onChange={ this.handleChangeTeamASize }>1</ToggleButton>\n                            <ToggleButton className=\"button teamSizeBtn\" \n                                          value={2} \n                                          onChange={ this.handleChangeTeamASize }>2</ToggleButton>\n                            <ToggleButton className=\"button teamSizeBtn\" \n                                          value={3} \n                                          onChange={ this.handleChangeTeamASize }>3</ToggleButton>\n                            <ToggleButton className=\"button teamSizeBtn\" \n                                          value={4} \n                                          onChange={ this.handleChangeTeamASize }>4</ToggleButton>\n                            <ToggleButton className=\"button teamSizeBtn\" \n                                          value={5} \n                                          onChange={ this.handleChangeTeamASize }>5</ToggleButton>\n                        </ToggleButtonGroup>\n\n                        <div className=\"teamSizeToolBar\"> \n                            <label className=\"teamLabel\"> Team B : \n                                <p className=\"teamBplayer\">{ teamAsize ? teamBsize : \"\" } </p>\n                            </label>\n                        </div>\n                    </ButtonToolbar>\n\n                <Button className=\"button teamGenerateBtn\"\n                        variant=\"primary\" size=\"lg\" block\n                        onClick={ this.handleTeamSubmit }\n                >Generate Teams</Button>\n\n\n                { teamGenerated && fullPlayer ? \n                    <p className= \"errorMessage\"> Don't like the teams?<br/>Change the number of players in each team and shuffle it again!</p>  \n                    : teamGenerated && !fullPlayer ? \n                    <p className= \"errorMessage\">Please enter 10 players first</p> \n                    : null\n                } \n\n                { teamGenerated && teamAsize === \"\" ? \n                    <p className= \"errorMessage\">Please select the number of players for each team</p>\n                    : null\n                }   \n                 \n                { !fullPlayer ? null : \n                <>\n                <div className =\"teamContainer\">\n                    <div className =\"teamAcontainer\">\n                        <ListGroup variant=\"flush\">\n                            <p className =\"teamHeader\">Team A</p>\n                                { teamA.map((current, i) => {\n                                    return (\n                                        <div className=\"listContainer\" key={i}> \n                                            <ListGroup.Item className=\"listItems\">\n                                                <span className=\"playerList-player\">{ current.player }</span>\n                                                <span className=\"playerList-position\">{ current.position }</span>\n                                            </ListGroup.Item>\n                                        </div>\n                                    ) \n                                })}\n                        </ListGroup>\n                    </div>\n                    \n                    <div className =\"teamBcontainer\">\n                        <ListGroup variant=\"flush\">\n                            <p className =\"teamHeader\">Team B</p>\n                                { teamB.map((current, i) => {\n                                    return (\n                                        <div className=\"listContainer\" key={i}> \n                                            <ListGroup.Item className=\"listItems\">\n                                                <span className=\"playerList-player\">{ current.player }</span>\n                                                <span className=\"playerList-position\">{ current.position }</span>\n                                            </ListGroup.Item>\n                                        </div>\n                                    )\n                                })}\n                        </ListGroup>\n                    </div>\n                </div>\n                </> \n            }\n            </form>   \n        );\n    }\n}\n \nexport default TeamGenerator;","import { connect } from 'react-redux';\nimport TeamGenerator from './TeamGenerator';\nimport { generateTeams } from '../../actions/state';\n\nconst mapStateToProps = state => {\n    return {\n         fullPlayer: state.fullPlayer,\n         teamA: state.teamA,\n         teamB: state.teamB,\n         playerList: state.playerList,\n         teamGenerated: state.teamGenerated,\n         teamAsize : state.teamAsize\n    };\n};\n\nconst mapDispatchtoProps = dispatch => {\n    return{\n        generateTeams: (value) => dispatch(generateTeams(value))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(TeamGenerator);","import React, { Component}  from 'react';\nimport { Button }  from 'react-bootstrap';\n\nclass ResetBtn extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            teamGenerated: props.teamGenerated,\n        }\n        \n        this.handleReset = this.handleReset.bind(this); \n    }\n\n    handleReset() {\n        this.props.handleReset({...this.state});\n        this.setState({\n            teamGenerated: false,\n        })\n    }\n\n    render() { \n        return (\n            <Button className = \"button resetBtn\"\n                    variant=\"primary\" size=\"lg\"\n                    onClick={ this.handleReset }>Reset</Button>\n        );\n    }\n}\n \nexport default ResetBtn;","import { connect } from 'react-redux';\nimport ResetBtn from './ResetBtn';\nimport { reset } from '../../actions/state';\n\nconst mapStateToProps = state => {\n    return {\n        teamGenerated: state.teamGenerated,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n     handleReset: () => dispatch(reset()),\n  }; \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetBtn);","import React from 'react';\nimport '../../App.css'\nimport '../../css/style.css';\n\nimport Header from '../Header/Header'\nimport Footer from '../Footer/Footer'\nimport Form from '../Form'\nimport PlayerList from '../PlayerList'\nimport TeamGenerator from '../TeamGenerator';\nimport ResetBtn from '../ResetBtn';\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <Form/>\n      <TeamGenerator/> \n      <PlayerList/> \n      <ResetBtn/>\n      <Footer/>\n    </>\n  );\n}\n\nexport default App;\n","const initial = {\n    player: \"\",\n    position: \"\",\n    playerList: [],\n    fullPlayer: false,\n    teamA: [],\n    teamB: [],\n    teamGenerated: false,\n    teamAsize: 5\n  };\n  \n  export default initial;","import initial from './initial';\n\nconst reset = (initial) => {\n    return {\n        ...initial,\n    };\n}\n\nconst addPlayer = (state, action) => {\n \n    const playerObj = {\n        player: action.form.player,\n        position: action.form.position,  \n    }\n\n    return {\n        ...state,\n        playerList: action.form.player && !(action.form.positionError) && action.form.position !== \"\" ? [...state.playerList, playerObj] : [...state.playerList]\n    }\n}\n\nconst generateTeams = (state, action) => ({\n    ...state, \n    teamA: action.payload.teamA,\n    teamB: action.payload.teamB,\n});\n\nconst deletePlayer = (state, action) => ({\n   ...state,\n   playerList: action.playerList\n});\n\nconst reducer = (state, action) => {\n    switch (action.type){\n         case \"addPlayer\": return addPlayer(state, action);\n         case \"generateTeams\": return generateTeams(state, action);\n         case \"deletePlayer\": return deletePlayer(state, action);\n         case \"reset\": return reset(initial);\n         default: return state;\n    };\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\n\nimport initial from './data/initial';\nimport reducer from './data/reducer';\n\nconst composeEnhancers = \n     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n     reducer, \n     initial,\n     composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n     <Provider store={ store }>\n          <App />\n     </Provider>,\n     document.getElementById(\"root\")\n);"],"sourceRoot":""}